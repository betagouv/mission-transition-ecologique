@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use '../setting';
@use "color" as tool;

@mixin border-color($color, $properties, $position: null, $width: thin, $style: solid, $lightness: 0%) {
  &--#{$color} {
    @include get-border-color-by-lightness($properties, $width, $style, $lightness, $position);

    @each $name, $lightness in setting.$opacities {
      &#{$name} {
        @include get-border-color-by-lightness($properties, $width, $style, $lightness, $position);
      }
    }
  }
}

@mixin border-color-with-position($color, $properties, $position, $width: thin, $style: solid, $lightness: 0%) {
  @if $position {
    @include get-border-color-by-lightness($properties, $width, $style, $lightness, $position);
    @include border-color($color, $properties, $position: $position, $width: $width, $style: $style, $lightness: $lightness);
  }
}

@mixin get-border-color-by-lightness($properties, $width, $style, $lightness: 0%, $position: null) {
  $values: if(meta.type-of($properties) == map, map.get($properties, "color"), $properties);

  @if $position {
    border-#{$position}: $width $style tool.scaleLightness($values, $lightness);
  } @else {
    border: $width $style tool.scaleLightness($values, $lightness);
  }
}
