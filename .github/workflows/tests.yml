name: Run tests

on:
  push:
    branches: [ main, preprod ]
  pull_request:
    branches: [ main, preprod ]

jobs:
  validate-data:
    name: Validation des donn√©es de dispositifs sur la base d'un JSON Schema
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x']
#
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm clean-install

      - run: npm run build-json-output && npm run test -w packages/data

  lint:
    name: Run eslint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ '18.x' ]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm clean-install
      - run: npm run spec-and-routes -w packages/backend
      - run: npm run build-json-output
      - run: npm run lint-check

  type-check:
    name: Run typescript types check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x']

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm clean-install
      - run: npm run build-json-output && npm run type-check -w packages/web

  unit-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x']
#
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm clean-install

      - run: npm run test -w packages/backend
