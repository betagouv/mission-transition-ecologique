name: Database Update

on:
  schedule:
    - cron: '12 1 * * *'
  workflow_dispatch:

env:
  ENV_PATH: libs/etl/.env

jobs:
  database_update:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['22.x']

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm clean-install --foreground-scripts
      - run: echo "ENV_FILE_PATH=libs/etl/.env" >> $GITHUB_ENV
      - name: Create .env file
        run: |
          echo "BREVO_API_TOKEN=${{ secrets.BREVO_API_TOKEN }}" >> $ENV_PATH
          echo "POSTHOG_WRITE_API_KEY=${{ secrets.POSTHOG_WRITE_API_KEY }}" >> $ENV_PATH
          echo "POSTHOG_READ_API_KEY=${{ secrets.POSTHOG_READ_API_KEY }}" >> $ENV_PATH
          echo "POSTHOG_PROJECT_ID=${{ secrets.POSTHOG_PROJECT_ID }}" >> $ENV_PATH
          echo "SIRENE_API_311_TOKEN=${{ secrets.SIRENE_API_311_TOKEN }}" >> $ENV_PATH
          echo "DB_USER=${{ secrets.DB_USER }}" >> $ENV_PATH
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $ENV_PATH
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $ENV_PATH
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $ENV_PATH
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $ENV_PATH
          echo "ETL_TEST=${{ secrets.ETL_TEST }}" >> $ENV_PATH
          echo "BASEROW_TOKEN=${{ secrets.BASEROW_TOKEN }}" >> $ENV_PATH

      - run: npx nx run @tee/etl:build-docker
      - run: npx nx run @tee/etl:update-database-ci
