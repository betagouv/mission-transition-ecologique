#!./.venv/bin/python

import os
import random
import re
import sys
from pathlib import Path
from typing import Any, Optional
import validators
import requests

import pylightxl
import yaml

INPUT_XL_FILE = "./dispositifs.xlsx"
WORKSHEET = "DataProd"
SKIP_XL_LINES = 5
OUTPUT_DIR = "../../programs"


CIBLE = "entreprise . est cibl√©e"
ELIGIBLE = "entreprise . est √©ligible"
OBJECTIF = "entreprise . a un objectif cibl√©"
SECTEUR = "entreprise . est dans un secteur d'activit√© cibl√©"
ZONE_GEO = "entreprise . est dans une zone g√©ographique √©ligible"
EFFECTIF = "entreprise . a un effectif √©ligible"
PARCOURS_OBJ_PRECIS = "questionnaire . parcours = objectif pr√©cis"
PROPRIO = "entreprise . est propri√©taire de ses locaux"

ELIGIBILITY_SIZE = "taille de l'entreprise"
ELIGIBILITY_GEOGRAPHY = "secteur g√©ographique"
ELIGIBILITY_SECTOR = "secteur d'activit√©"
ELIGIBILITY_NYEARS = "nombre d'ann√©es d'activit√©"
ELIGIBILITY_SPECIFIC = "autres crit√®res d'√©ligibilit√©"

ALL = "toutes ces conditions"
ANY = "une de ces conditions"


def remove_namespace(s):
    return "".join(s.split(" . ")[1:])


def assembleProgramYAML(rawData, colNumbersByName, id):
    def get(name):
        value = rawData[colNumbersByName[name]]
        return curate(value)

    def get_maybe(name):
        if name not in colNumbersByName:
            return False
        value = rawData[colNumbersByName[name]]
        return curate(value)

    try:
        existingProgram = readFromYaml(Path(OUTPUT_DIR, f"{id}.yaml"))
    except:  # noqa
        existingProgram = {}

    prog = {}

    FORCE_ALL = True

    # Only sets the key if key does not exist.
    # if force = True, then replaces the key even if it exists
    def set(key, value, overwrite=FORCE_ALL):
        if overwrite or key not in existingProgram:
            prog[key] = value
        else:
            prog[key] = existingProgram[key]

    set("titre", get("Titre"))
    set("promesse", get("Promesse"))
    set("description", get("Description courte"))

    if get("Description longue"):
        set("description longue", get("Description longue"))

    if valid(get("DISPOSITIF_DATE_DEBUT")):
        set("d√©but de validit√©", get("DISPOSITIF_DATE_DEBUT"))
    if valid(get("DISPOSITIF_DATE_FIN")):
        set("fin de validit√©", get("DISPOSITIF_DATE_FIN"))

    set("illustration", randomIllustration(), overwrite=False)
    set("op√©rateur de contact", get("Op√©rateur de contact"))

    autresOp = csv_to_list(get("Autres op√©rateurs"))
    if len(autresOp) >= 1:
        set("autres op√©rateurs", autresOp)

    set("url", get("üîó URL externe"))
    set("nature de l'aide", get("üí∏ Nature de l'aide").lower())
    nat = prog["nature de l'aide"]
    if nat == "financement":
        set("montant du financement", get("üí∞ Montant de l'aide"))
    if nat == "accompagnement" or nat == "formation":
        set("co√ªt de l'accompagnement", get("üí∞ Co√ªt reste √† charge"))
        set("dur√©e de l'accompagnement", get("‚è±Prestation (dur√©e + √©talement)"))
    if nat == "pr√™t":
        set("dur√©e du pr√™t", get("Etalement"))
        set(
            "montant du pr√™t",
            f'De {thousandSep(get("MontantMin aide"))}‚ÄØ‚Ç¨ √† {thousandSep(get("MontantMax aide"))}‚ÄØ‚Ç¨',
        )
    if nat == "avantage fiscal":
        set("montant de l'avantage fiscal", get("üí∞ Montant de l'aide"))

    if get("Dispositif activable en autonomie") == 1:
        set("activable en autonomie", "oui")

    objectives = createYamlObjectives(get_maybe)
    set("objectifs", objectives)

    pc = {}
    cible = []  # Accumulateur des r√®gles qui font parti du ciblage.
    eligibilite = []  # Accumulateur des r√®gles qui font parti de l'√©ligibilit√©.

    # Conditions d'√©ligibilit√©
    eligibility_conditions = {
        ELIGIBILITY_SIZE: [],
        ELIGIBILITY_GEOGRAPHY: [],
        ELIGIBILITY_SECTOR: [],
        ELIGIBILITY_NYEARS: [],
    }

    eligibility_conditions[ELIGIBILITY_SIZE].append(eligibility_size(get))
    eligibility_conditions[ELIGIBILITY_SIZE].append(eligibility_microentreprise(get))

    for eg in eligibility_geography(get):
        eligibility_conditions[ELIGIBILITY_GEOGRAPHY].append(eg)

    eligibility_conditions[ELIGIBILITY_SECTOR].append(eligibility_sector(get))
    if eligibility_naf(get):
        eligibility_conditions[ELIGIBILITY_SECTOR].append(eligibility_naf(get))

    eligibility_conditions[ELIGIBILITY_NYEARS].append(eligibility_nyears(get))

    for es in eligibility_specific(get):
        if ELIGIBILITY_SPECIFIC not in eligibility_conditions:
            eligibility_conditions[ELIGIBILITY_SPECIFIC] = []
        eligibility_conditions[ELIGIBILITY_SPECIFIC].append(es)

    set("conditions d'√©ligibilit√©", eligibility_conditions)

    # Publicodes constraints
    effective_constraint = pc_effectifConstraint(get("minEff"), get("maxEff"))
    if effective_constraint:
        pc[EFFECTIF] = effective_constraint
        eligibilite.append(remove_namespace(EFFECTIF))

    sc = pc_secteurActivit√©Constraint(get)
    if sc:
        pc[SECTEUR] = sc
        cible.append(remove_namespace(SECTEUR))

    op = pc_objPrioritaire(get)
    if op:
        pc[OBJECTIF] = op
        cible.append(remove_namespace(OBJECTIF))

    reg = pc_regions(get)
    if reg:
        pc[ZONE_GEO] = reg
        eligibilite.append(ZONE_GEO)

    p360 = pc_questionnaireRoute(get)
    if p360:
        cible.append(PARCOURS_OBJ_PRECIS)

    own = pc_building_owner(get)
    if own:
        cible.append(PROPRIO)

    applicability = pc_eligibility_applicability(
        get("DISPOSITIF_DATE_DEBUT"), get("DISPOSITIF_DATE_FIN")
    )

    if len(eligibilite) != 0:
        eligibilite = {
            **applicability,
            ALL: eligibilite,
        }
    elif applicability:
        eligibilite = {
            **applicability,
            "valeur": "oui",
        }

    publicodes_obj = {}

    if eligibilite:
        cible = [remove_namespace(ELIGIBLE)] + cible

    publicodes_obj[CIBLE] = {ALL: cible}

    if eligibilite:
        publicodes_obj[ELIGIBLE] = eligibilite

    publicodes_obj |= pc

    set("publicodes", publicodes_obj, overwrite=False)

    return convertToYaml(prog)


def isValidLink(link, i, j):
    if link == "":
        return False

    if not validators.url(link):
        print(f"lien {i}{j} non valide")
        return False

    try:
        response = requests.head(link)
        if response.status_code == 200:
            return True
        else:
            print(f"Warning: lien {i}{j}, status code :", response.status_code)
        return True
    except requests.exceptions.RequestException:
        print(
            f"Lien {i}{j}, erreur durant la requ√®te, Lien non ajout√©",
            requests.exceptions.RequestException,
        )
        return False


def createYamlObjectives(get):
    objectiveList = []
    possibleObjective = ["1er", "2√®me", "3√®me", "4√®me", "5√®me", "6√®me"]
    i = 0
    while i < 6 and get(f"üéØ {possibleObjective[i]} √©tape"):
        if get(f"üéØ {possibleObjective[i]} √©tape") == "-":
            i += 1
            continue
        currentObjective = {}
        currentObjective["description"] = get(f"üéØ {possibleObjective[i]} √©tape")
        linkList = []
        j = 1
        while get(f"√©tape {i+1}/ lien{j}"):
            link = get(f"√©tape {i+1}/ lien{j}")
            text = get(f"√©tape {i+1}/ nom du lien{j}")
            j += 1
            if not link or not text or not isValidLink(link, i, j):
                continue
            linkList.append({"lien": link, "texte": text})
        if linkList:
            currentObjective["liens"] = linkList
        objectiveList.append(currentObjective)
        i += 1
    return objectiveList


def remove_special_chars(text: str) -> str:
    t = re.sub(r'("[^"]+")|[-\']', r"\1 ", text)
    t = re.sub(r'("[^"]+")|[^\w ]', r"\1 ", t)

    return t


def remove_accents(text: str) -> str:
    """Remove accents removes accents on voyels.

    It does not deal with √¶, √± etc. Consult code for exact substitutions.
    """
    t = re.sub(r"[√®√©√™√´]", "e", text)
    t = re.sub(r"[√†√°√¢√£√§√•]", "a", t)
    t = re.sub(r"[√¨√≠√Æ√Ø]", "i", t)
    t = re.sub(r"[√≤√≥√¥√µ√∂]", "o", t)
    t = re.sub(r"[√π√∫√ª√º]", "u", t)
    t = re.sub(r"[√à√â√ä√ã]", "E", t)
    t = re.sub(r"[√Ä√Å√Ç√É√Ñ√Ö]", "A", t)
    t = re.sub(r"[√å√ç√é√è]", "I", t)
    t = re.sub(r"[√í√ì√î√ï√ñ]", "O", t)
    t = re.sub(r"[√ô√ö√õ√ú]", "U", t)
    t = re.sub(r"√ß", "c", t)
    return t


def forgeID(name):
    name = name.lower()
    name = remove_special_chars(name)
    name = remove_accents(name)
    name = re.sub(r"[ _'&]", "-", name)
    name = re.sub(r"-+", "-", name)
    name = re.sub(r"-$", "", name)
    name = re.sub(r"\"", "", name)
    return name


def readXL(path, worksheet):
    db = pylightxl.readxl(fn=path, ws=worksheet)
    return db.ws(worksheet)


def identifyColNumbers(header: list[Any]):
    return {h: i for h, i in zip(header, range(len(header)))}


def randomIllustration():
    illustrations = [
        "images/TEE_energie_verte.png",
        "images/TEE_ampoule.png",
        "images/TEE_eolienne.png",
    ]
    return illustrations[random.randint(0, 2)]


WRONG_DATE_PATTERN = re.compile(r"^[0-9]{4}/[0-9]{2}/[0-9]{2}$")


def curate(value):
    curated = value
    if isinstance(value, str):
        curated = curated.strip()

    if isinstance(curated, str) and WRONG_DATE_PATTERN.match(curated):
        curated = curated[8:10] + "/" + curated[5:7] + "/" + curated[0:4]

    return curated


def valid(value):
    if curate(value) == "-" or curate(value) == "*" or curate(value) == "":
        return False
    return True


def csv_to_list(input: str) -> list[str]:
    return [curate(s) for s in re.split(r",|\|", input) if valid(s)]


def makeObj(objs: list[str]):
    def keepObj(obj):
        return curate(obj) != "" and curate(obj) != "-"

    return [obj for obj in objs if keepObj(obj)]


def eligibility_size(get) -> str:
    col_eligibilite_taille = get("üë´üë´\nEligibilit√© Taille")
    col_min_eff = get("minEff")
    col_max_eff = get("maxEff")
    if valid(col_eligibilite_taille):
        return col_eligibilite_taille
    elif valid(col_min_eff) and valid(col_max_eff):
        return f"Effectif compris entre {col_min_eff} et {col_max_eff} employ√©s"
    elif valid(col_min_eff):
        return f"Effectif sup√©rieur √† {col_min_eff} employ√©s"
    elif valid(col_max_eff):
        return f"Effectif inf√©rieur √† {col_max_eff} employ√©s"
    return "Toutes tailles"


def eligibility_microentreprise(get) -> str:
    me = get("microEntre")
    if valid(me):
        if me.lower() == "oui":
            return "√âligible aux micro-entreprises"
        elif me.lower() == "non":
            return "Non √©ligible aux micro-entreprises"
        else:
            raise Exception("Valeur non interpr√©table (colonne microEntre)")
    return "√âligible aux micro-entreprises"


def eligibility_sector(get) -> str:
    es = get("üë®‚Äçüç≥Eligibilit√© Sectorielle")
    if valid(es):
        return es
    raise Exception("Condition d'√©ligibilit√© sectorielle manquante")


def eligibility_geography(get) -> list[str]:
    egr = get("Zones g√©ographiques R√©gional")
    egr = ", ".join(csv_to_list(egr))
    egs = get("Zones g√©ographiques Sp√©cifique")
    egs = ", ".join(csv_to_list(egs))
    egd = get("Zones g√©ographiques D√©partemental")
    egd = ", ".join(csv_to_list(egd))
    eg = [eg for eg in [egr, egs, egd] if valid(eg)]
    if len(eg) > 0:
        return eg
    else:
        return ["France et territoires d'outre-mer"]


def eligibility_naf(get) -> Optional[str]:
    en = get("Eligibilit√© Naf")
    if valid(en):
        return en
    return None


def eligibility_nyears(get) -> str:
    en = get("Eligibilit√© Existence")
    if valid(en):
        return en
    return "√âligible √† toutes les entreprises"


def eligibility_specific(get) -> list[str]:
    es1 = get("Eligibilit√© Sp√©cifique1")
    es2 = get("Eligibilit√© Sp√©cifique2")
    es3 = get("Eligibilit√© Sp√©cifique3")
    return [es for es in [es1, es2, es3] if valid(es)]


def pc_effectifConstraint(effmin, effmax):
    constraint = []
    if valid(effmin) and effmin != 0:
        constraint.append(f"effectif >= {effmin}")
    if valid(effmax):
        constraint.append(f"effectif <= {effmax}")
    if len(constraint) == 0:
        return None
    else:
        return {ALL: constraint}


def pc_secteurActivit√©Constraint(get):
    secteurs = [
        "AAgriculture, sylviculture et p√™che",
        "BIndustries extractives",
        "CIndustrie manufacturi√®re",
        "DProduction et distribution d'√©lectricit√©, de gaz, de vapeur et d'air conditionn√©",
        "EProduction et distribution d'eau, assainissement, gestion des d√©chets et d√©pollution",
        "FConstruction",
        "GCommerce, r√©paration d'automobiles et de motocycles",
        "HTransports et entreposage",
        "IH√©bergement et restauration",
        "JInformation et communication",
        "KActivit√©s financi√®res et d'assurance",
        "LActivit√©s immobili√®res",
        "MActivit√©s sp√©cialis√©es, scientifiques et techniques",
        "NActivit√©s de services administratifs et de soutien",
        "OAdministration publique",
        "PEnseignement",
        "QSant√© humaine et action sociale",
        "RArts, spectacles et activit√©s r√©cr√©atives",
        "SAutres activit√©s de services",
        "TActivit√©s des m√©nages en tant qu'employeurs, activit√©s indiff√©renci√©es des m√©nages en tant que producteurs de biens et services pour usage propre",
        "UActivit√©s extra-territoriales",
    ]

    secteursInd = [bool(get(sect)) for sect in secteurs]

    if sum(secteursInd) == 0:
        return None

    return {
        "une de ces conditions": [
            f"code NAF niveau 1 . est {s[0]}"
            for s, keep in zip(secteurs, secteursInd)
            if keep
        ]
    }


def pc_objPrioritaire(get):
    objPri = {
        "üè¢\nB√¢timent": "est r√©nover mon b√¢timent",
        "üö≤\nMobilit√©": "est la mobilit√© durable",
        "üóë\nD√©chets": "est la gestion des d√©chets",
        "üíß\nEau": "est diminuer ma consommation d'eau",
        "‚ö°Ô∏è\nEnergie": "est ma performance √©nerg√©tique",
        "üßë‚Äçüéì\nRH": "est former ou recruter",
        "üå±\nStrat√©gie": "est mon impact environnemental",
        "üè≠\nProduction": "est l'√©coconception",
    }

    objPriInd = [bool(get(theme)) for theme in objPri.keys()]
    if sum(objPriInd) == 0:
        return None

    return {
        ANY: [
            f"questionnaire . objectif prioritaire . {objectif}"
            for objectif, keep in zip(objPri.values(), objPriInd)
            if keep
        ]
    }


def pc_regions(get):
    regions = csv_to_list(get("Zones g√©ographiques R√©gional"))

    if len(regions) == 0:
        return None

    return {ANY: [f"r√©gion = {region}" for region in regions]}


def pc_questionnaireRoute(get):
    shouldShowOnPreciseOnly = not bool(
        get('Parcours "Je ne sais pas par o√π commencer"')
    )

    if not shouldShowOnPreciseOnly:
        return None

    return True


def pc_building_owner(get):
    shouldAddressBuildingOwner = valid(get("Propri√©taire"))
    if not shouldAddressBuildingOwner:
        return None
    return True


def pc_eligibility_applicability(validity_start, validity_end):
    has_started = "dispositif . d√©but de validit√© <= date du jour"
    has_not_ended = "date du jour <= dispositif . fin de validit√©"

    if not validity_start and not validity_end:
        return {}
    if not validity_start:
        return {"applicable si": has_not_ended}
    if not validity_end:
        return {"applicable si": has_started}
    return {"applicable si": {ALL: [has_started, has_not_ended]}}


def thousandSep(value):
    return "{:,}".format(value).replace(",", "‚ÄØ")


def convertToYaml(d: dict):
    return yaml.safe_dump(d, allow_unicode=True, sort_keys=False)


def readFromYaml(program_path: Path):
    with open(program_path, "r") as f:
        program = yaml.safe_load(f)
    return program


if __name__ == "__main__":
    if len(sys.argv) > 1:
        worksheet = sys.argv[1]
    else:
        worksheet = WORKSHEET

    input = readXL(INPUT_XL_FILE, worksheet)
    headerRowIndex = SKIP_XL_LINES + 1
    colNumbers = identifyColNumbers(input.row(headerRowIndex))

    all_ids = set()
    for i, row in enumerate(input.rows):
        if i <= headerRowIndex:
            pass

        enProductionCol = row[7]
        if enProductionCol == 1:
            id = row[1]
            if id == "":
                id = forgeID(row[3])

            if id in all_ids:
                raise Exception("Duplicate ID !")
            all_ids.add(id)

            print(f"üñäÔ∏è {id}.yaml")
            prog = assembleProgramYAML(row, colNumbers, id)
            with open(os.path.join(OUTPUT_DIR, f"{id}.yaml"), "w") as f:
                f.write(prog)
